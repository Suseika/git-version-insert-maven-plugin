/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015, Georgy Vlasov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.tendiwa.maven.gitversioninsert;

import java.io.IOException;
import java.nio.file.Path;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;

/**
 * File in a working directory under Git.
 * @author Georgy Vlasov (suseika@tendiwa.org)
 * @version $version-stub$
 * @since 0.1
 */
final class FileInGitWorkingTree {

    private final Git git;

    /**
     * Path to file in git working tree.
     */
    private final String path;

    /**
     * @param git Git repository.
     * @param pathInWorkingDir Path to the file relative to working directory
     * of a git repository.
     */
    FileInGitWorkingTree(Git git, String pathInWorkingDir) {
        this.git = git;
        this.path = pathInWorkingDir;
    }

    /**
     * Last revision of the file. Revision number is generated by
     * <pre>git describe</pre> command.
     */
    public final String lastRevision() {
        try {
            return this.git
                .describe()
                .setTarget(
                    this.git
                        .log()
                        .addPath(this.path)
                        .setMaxCount(1)
                        .call()
                        .iterator()
                        .next()
                        .getId()
                )
                .call();
        } catch (IOException | GitAPIException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @return Absolute path to this file.
     */
    public Path absolutePath() {
        return this.git
            .getRepository()
            .getDirectory()
            .toPath()
            .getParent()
            .toAbsolutePath()
            .resolve(this.path);
    }

}
